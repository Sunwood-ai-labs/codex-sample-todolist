"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[456],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var i=t(6540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=i.createContext({}),r=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=r(e.components);return i.createElement(d.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=r(t),u=a,m=p["".concat(d,".").concat(u)]||p[u]||f[u]||o;return t?i.createElement(m,s(s({ref:n},c),{},{components:t})):i.createElement(m,s({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[p]="string"==typeof e?e:a,s[1]=l;for(var r=2;r<o;r++)s[r]=t[r];return i.createElement.apply(null,s)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7403:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>r});var i=t(8168),a=(t(6540),t(5680));const o={title:"\u2728 TODO\u30ea\u30b9\u30c8\u30a2\u30d7\u30ea\u6a5f\u80fd\u8ffd\u52a0\u3068Docker Compose\u5bfe\u5fdc",date:new Date("2025-04-19T06:25:32.000Z"),slug:"/blog/11483d3/",authors:["sunwood"]},s=void 0,l={permalink:"/codex-sample-todolist/blog/blog/11483d3/",editUrl:"https://github.com/Sunwood-ai-labs/codex-sample-todolist/edit/main/docs-site/blog/blog/2025-04-19-11483d3.md",source:"@site/blog/2025-04-19-11483d3.md",title:"\u2728 TODO\u30ea\u30b9\u30c8\u30a2\u30d7\u30ea\u6a5f\u80fd\u8ffd\u52a0\u3068Docker Compose\u5bfe\u5fdc",description:"~diff",date:"2025-04-19T06:25:32.000Z",formattedDate:"April 19, 2025",tags:[],readingTime:8.85,truncated:!1,authors:[{name:"Sunwood-ai-labs",url:"https://github.com/Sunwood-ai-labs",key:"sunwood"}],prevItem:{title:"\ud83d\udd00 Merge: TODO\u30ea\u30b9\u30c8\u30a2\u30d7\u30ea\u6a5f\u80fd\u8ffd\u52a0\u3068Docker Compose\u5bfe\u5fdc",permalink:"/codex-sample-todolist/blog/blog/0f048bb/"},nextItem:{title:"Initial commit",permalink:"/codex-sample-todolist/blog/blog/027609d/"}},d={authorsImageUrls:[void 0]},r=[],c={toc:r},p="wrapper";function f(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,i.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-diff"},'diff --git a/.dockerignore b/.dockerignore\nnew file mode 100644\nindex 0000000..3949275\n--- /dev/null\n+++ b/.dockerignore\n@@ -0,0 +1,24 @@\n+__pycache__/\n+*.pyc\n+*.pyo\n+*.pyd\n+.Python\n+env/\n+venv/\n+build/\n+develop-eggs/\n+dist/\n+downloads/\n+eggs/\n+.eggs/\n+lib/\n+lib64/\n+parts/\n+sdist/\n+var/\n+*.egg-info/\n+.installed.cfg\n+*.egg\n+.git/\n+.venv/\n+tasks.db\n\\ No newline at end of file\ndiff --git a/.gitignore b/.gitignore\nindex 0a19790..775eb37 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -1,3 +1,5 @@\n+# Application database\n+tasks.db\n # Byte-compiled / optimized / DLL files\n __pycache__/\n *.py[cod]\ndiff --git a/Dockerfile b/Dockerfile\nnew file mode 100644\nindex 0000000..33a184e\n--- /dev/null\n+++ b/Dockerfile\n@@ -0,0 +1,26 @@\n+# Use official Python runtime as a parent image\n+FROM python:3.9-slim\n+\n+# Set working directory\n+WORKDIR /app\n+\n+# Install dependencies\n+COPY requirements.txt .\n+RUN pip install --no-cache-dir -r requirements.txt\n+\n+# Copy application code\n+COPY . .\n+# Copy entrypoint script and make executable\n+COPY entrypoint.sh /usr/local/bin/entrypoint.sh\n+RUN chmod +x /usr/local/bin/entrypoint.sh\n+\n+# Expose the port Flask will run on\n+EXPOSE 5000\n+\n+# Environment variables\n+ENV FLASK_APP=app.py\n+ENV FLASK_RUN_HOST=0.0.0.0\n+\n+# Entrypoint with auto-init and default command\n+ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]\n+CMD ["flask", "run"]\n\\ No newline at end of file\ndiff --git a/README.md b/README.md\nindex 8f0a658..0f69e42 100644\n--- a/README.md\n+++ b/README.md\n@@ -1 +1,48 @@\n-# codex-sample-todolist\n\\ No newline at end of file\n+# codex-sample-todolist\n+\n+A simple Flask-based TODO list application.\n+\n+## Requirements\n+\n+- Python 3.7+\n+- Flask\n+\n+## Setup\n+\n+1. Clone the repository and enter the directory:\n+\n+   git clone <repo-url>\n+   cd codex-sample-todolist\n+\n+2. (Optional) Create and activate a virtual environment:\n+\n+   python3 -m venv venv\n+   source venv/bin/activate\n+\n+3. Install dependencies:\n+\n+   pip install -r requirements.txt\n+\n+4. Initialize the database:\n+\n+   flask init-db\n+\n+5. Run the application:\n+\n+   flask run\n+\n+The app will be available at http://127.0.0.1:5000.\n+\n+## Docker Compose\n+\n+You can also run the application using Docker Compose:\n+\n+1. Build and start the service (database will be auto-initialized on first run):\n+\n+   docker-compose up --build\n+\n+2. The app will be available at http://localhost:5000.\n+\n+3. (Optional) To reset the database:\n+\n+   docker-compose run web flask init-db\ndiff --git a/app.py b/app.py\nnew file mode 100644\nindex 0000000..efd32c4\n--- /dev/null\n+++ b/app.py\n@@ -0,0 +1,127 @@\n+#!/usr/bin/env python3\n+import sqlite3\n+from flask import Flask, render_template, request, redirect, url_for, g, flash\n+\n+app = Flask(__name__, static_folder=\'static\')\n+app.config[\'DATABASE\'] = \'tasks.db\'\n+app.config[\'SECRET_KEY\'] = \'dev\'\n+\n+def get_db():\n+    if \'db\' not in g:\n+        g.db = sqlite3.connect(\n+            app.config[\'DATABASE\'],\n+            detect_types=sqlite3.PARSE_DECLTYPES\n+        )\n+        g.db.row_factory = sqlite3.Row\n+    return g.db\n+\n+@app.teardown_appcontext\n+def close_db(exception):\n+    db = g.pop(\'db\', None)\n+    if db is not None:\n+        db.close()\n+\n+def init_db():\n+    db = get_db()\n+    with open(\'schema.sql\', \'r\') as f:\n+        db.executescript(f.read())\n+    # Ensure changes are committed\n+    db.commit()\n+\n+@app.cli.command(\'init-db\')\n+def init_db_command():\n+    """Initialize the database."""\n+    init_db()\n+    print(\'Initialized the database.\')\n+\n+@app.before_request\n+def ensure_db():\n+    """Auto-initialize the database if the task table is missing."""\n+    db = get_db()\n+    try:\n+        db.execute(\'SELECT 1 FROM task LIMIT 1\').fetchone()\n+    except sqlite3.OperationalError:\n+        init_db()\n+    # Lower-level init-db ensures commit, nothing else needed\n+\n+@app.route(\'/\')\n+def index():\n+    filter_status = request.args.get(\'filter\', \'all\')\n+    sort_key = request.args.get(\'sort\', \'due_date\')\n+    db = get_db()\n+    query = \'SELECT * FROM task\'\n+    conditions = []\n+    if filter_status == \'active\':\n+        conditions.append(\'complete = 0\')\n+    elif filter_status == \'completed\':\n+        conditions.append(\'complete = 1\')\n+    if conditions:\n+        query += \' WHERE \' + \' AND \'.join(conditions)\n+    if sort_key in (\'due_date\', \'created_at\', \'priority\'):\n+        query += f\' ORDER BY {sort_key}\'\n+    tasks = db.execute(query).fetchall()\n+    return render_template(\'index.html\', tasks=tasks, filter_status=filter_status, sort_key=sort_key)\n+\n+@app.route(\'/add\', methods=(\'POST\',))\n+def add():\n+    title = request.form.get(\'title\', \'\').strip()\n+    due_date = request.form.get(\'due_date\', \'\')\n+    priority = request.form.get(\'priority\', \'Medium\')\n+    if not title:\n+        flash(\'Title is required.\', \'danger\')\n+    else:\n+        db = get_db()\n+        db.execute(\n+            \'INSERT INTO task (title, due_date, priority) VALUES (?, ?, ?)\',\n+            (title, due_date or None, priority)\n+        )\n+        db.commit()\n+        flash(\'Task added!\', \'success\')\n+    return redirect(url_for(\'index\'))\n+\n+@app.route(\'/<int:task_id>/toggle\', methods=(\'POST\',))\n+def toggle(task_id):\n+    db = get_db()\n+    task = db.execute(\'SELECT complete FROM task WHERE id = ?\', (task_id,)).fetchone()\n+    if task:\n+        new_status = 0 if task[\'complete\'] else 1\n+        db.execute(\'UPDATE task SET complete = ? WHERE id = ?\', (new_status, task_id))\n+        db.commit()\n+        flash(\'Task status updated.\', \'success\')\n+    else:\n+        flash(\'Task not found.\', \'danger\')\n+    return redirect(url_for(\'index\'))\n+\n+@app.route(\'/<int:task_id>/delete\', methods=(\'POST\',))\n+def delete(task_id):\n+    db = get_db()\n+    db.execute(\'DELETE FROM task WHERE id = ?\', (task_id,))\n+    db.commit()\n+    flash(\'Task deleted.\', \'success\')\n+    return redirect(url_for(\'index\'))\n+\n+@app.route(\'/<int:task_id>/edit\', methods=(\'GET\', \'POST\'))\n+def edit(task_id):\n+    db = get_db()\n+    task = db.execute(\'SELECT * FROM task WHERE id = ?\', (task_id,)).fetchone()\n+    if not task:\n+        flash(\'Task not found.\', \'danger\')\n+        return redirect(url_for(\'index\'))\n+    if request.method == \'POST\':\n+        title = request.form.get(\'title\', \'\').strip()\n+        due_date = request.form.get(\'due_date\', \'\')\n+        priority = request.form.get(\'priority\', \'Medium\')\n+        if not title:\n+            flash(\'Title is required.\', \'danger\')\n+        else:\n+            db.execute(\n+                \'UPDATE task SET title = ?, due_date = ?, priority = ? WHERE id = ?\',\n+                (title, due_date or None, priority, task_id)\n+            )\n+            db.commit()\n+            flash(\'Task updated.\', \'success\')\n+        return redirect(url_for(\'index\'))\n+    return render_template(\'edit.html\', task=task)\n+\n+if __name__ == \'__main__\':\n+    app.run(debug=True)\n\\ No newline at end of file\ndiff --git a/docker-compose.yml b/docker-compose.yml\nnew file mode 100644\nindex 0000000..ab08cfc\n--- /dev/null\n+++ b/docker-compose.yml\n@@ -0,0 +1,11 @@\n+services:\n+  web:\n+    build:\n+      context: .\n+      dockerfile: Dockerfile\n+    ports:\n+      - "5000:5000"\n+    volumes:\n+      - .:/app:delegated\n+    environment:\n+      - FLASK_ENV=development\n\\ No newline at end of file\ndiff --git a/entrypoint.sh b/entrypoint.sh\nnew file mode 100644\nindex 0000000..cdc1b73\n--- /dev/null\n+++ b/entrypoint.sh\n@@ -0,0 +1,10 @@\n+#!/usr/bin/env sh\n+# Auto-initialize the database if not present\n+set -e\n+# If the database file does not exist in /app, initialize it\n+if [ ! -f "/app/tasks.db" ]; then\n+  echo "Initializing database..."\n+  flask init-db\n+fi\n+# Execute the provided command (e.g., flask run)\n+exec "$@"\n\\ No newline at end of file\ndiff --git a/requirements.txt b/requirements.txt\nnew file mode 100644\nindex 0000000..297d83e\n--- /dev/null\n+++ b/requirements.txt\n@@ -0,0 +1 @@\n+Flask>=2.0\n\\ No newline at end of file\ndiff --git a/schema.sql b/schema.sql\nnew file mode 100644\nindex 0000000..82ee7ea\n--- /dev/null\n+++ b/schema.sql\n@@ -0,0 +1,9 @@\n+DROP TABLE IF EXISTS task;\n+CREATE TABLE task (\n+    id INTEGER PRIMARY KEY AUTOINCREMENT,\n+    title TEXT NOT NULL,\n+    due_date DATE,\n+    priority TEXT CHECK(priority IN (\'Low\', \'Medium\', \'High\')) NOT NULL DEFAULT \'Medium\',\n+    complete INTEGER NOT NULL DEFAULT 0,\n+    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n+);\n\\ No newline at end of file\ndiff --git a/static/style.css b/static/style.css\nnew file mode 100644\nindex 0000000..bde95cb\n--- /dev/null\n+++ b/static/style.css\n@@ -0,0 +1,8 @@\n+body {\n+    padding-bottom: 2rem;\n+}\n+\n+table td form button {\n+    background: none;\n+    border: none;\n+}\n\\ No newline at end of file\ndiff --git a/templates/base.html b/templates/base.html\nnew file mode 100644\nindex 0000000..116ccf9\n--- /dev/null\n+++ b/templates/base.html\n@@ -0,0 +1,31 @@\n+<!doctype html>\n+<html lang="ja">\n+<head>\n+    <meta charset="utf-8">\n+    <meta name="viewport" content="width=device-width, initial-scale=1">\n+    <title>TODO List</title>\n+    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">\n+    <link href="{{ url_for(\'static\', filename=\'style.css\') }}" rel="stylesheet">\n+</head>\n+<body>\n+<nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">\n+  <div class="container-fluid">\n+    <a class="navbar-brand" href="{{ url_for(\'index\') }}">TODO List</a>\n+  </div>\n+</nav>\n+<div class="container">\n+  {% with messages = get_flashed_messages(with_categories=true) %}\n+    {% if messages %}\n+      {% for category, message in messages %}\n+        <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">\n+          {{ message }}\n+          <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n+        </div>\n+      {% endfor %}\n+    {% endif %}\n+  {% endwith %}\n+  {% block content %}{% endblock %}\n+</div>\n+<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"><\/script>\n+</body>\n+</html>\n\\ No newline at end of file\ndiff --git a/templates/edit.html b/templates/edit.html\nnew file mode 100644\nindex 0000000..bbd66a4\n--- /dev/null\n+++ b/templates/edit.html\n@@ -0,0 +1,26 @@\n+{% extends \'base.html\' %}\n+\n+{% block content %}\n+<h1>Edit Task</h1>\n+<form method="post" action="{{ url_for(\'edit\', task_id=task.id) }}" class="row g-3">\n+  <div class="col-md-6">\n+    <label class="form-label">Title</label>\n+    <input type="text" class="form-control" name="title" value="{{ task.title }}" required>\n+  </div>\n+  <div class="col-auto">\n+    <label class="form-label">Due Date</label>\n+    <input type="date" class="form-control" name="due_date" value="{{ task.due_date }}">\n+  </div>\n+  <div class="col-auto">\n+    <label class="form-label">Priority</label>\n+    <select class="form-select" name="priority">\n+      <option value="Low" {% if task.priority==\'Low\' %}selected{% endif %}>Low</option>\n+      <option value="Medium" {% if task.priority==\'Medium\' %}selected{% endif %}>Medium</option>\n+      <option value="High" {% if task.priority==\'High\' %}selected{% endif %}>High</option>\n+    </select>\n+  </div>\n+  <div class="col-auto align-self-end">\n+    <button type="submit" class="btn btn-primary">Save</button>\n+  </div>\n+</form>\n+{% endblock %}\n\\ No newline at end of file\ndiff --git a/templates/index.html b/templates/index.html\nnew file mode 100644\nindex 0000000..76638af\n--- /dev/null\n+++ b/templates/index.html\n@@ -0,0 +1,80 @@\n+{% extends \'base.html\' %}\n+\n+{% block content %}\n+<div class="d-flex justify-content-between align-items-center mb-3">\n+  <h1>Tasks</h1>\n+  <form class="row g-2" method="get" action="{{ url_for(\'index\') }}">\n+    <div class="col-auto">\n+      <select class="form-select" name="filter" onchange="this.form.submit()">\n+        <option value="all" {% if filter_status==\'all\' %}selected{% endif %}>All</option>\n+        <option value="active" {% if filter_status==\'active\' %}selected{% endif %}>Active</option>\n+        <option value="completed" {% if filter_status==\'completed\' %}selected{% endif %}>Completed</option>\n+      </select>\n+    </div>\n+    <div class="col-auto">\n+      <select class="form-select" name="sort" onchange="this.form.submit()">\n+        <option value="due_date" {% if sort_key==\'due_date\' %}selected{% endif %}>Due Date</option>\n+        <option value="created_at" {% if sort_key==\'created_at\' %}selected{% endif %}>Created</option>\n+        <option value="priority" {% if sort_key==\'priority\' %}selected{% endif %}>Priority</option>\n+      </select>\n+    </div>\n+  </form>\n+</div>\n+<form method="post" action="{{ url_for(\'add\') }}" class="row g-3 mb-4">\n+  <div class="col-md-6">\n+    <input type="text" class="form-control" name="title" placeholder="New task" required>\n+  </div>\n+  <div class="col-auto">\n+    <input type="date" class="form-control" name="due_date">\n+  </div>\n+  <div class="col-auto">\n+    <select class="form-select" name="priority">\n+      <option value="Low">Low</option>\n+      <option value="Medium" selected>Medium</option>\n+      <option value="High">High</option>\n+    </select>\n+  </div>\n+  <div class="col-auto">\n+    <button type="submit" class="btn btn-primary mb-3">Add</button>\n+  </div>\n+</form>\n+<table class="table table-striped">\n+  <thead>\n+    <tr>\n+      <th>Done</th>\n+      <th>Title</th>\n+      <th>Due Date</th>\n+      <th>Priority</th>\n+      <th>Created</th>\n+      <th>Actions</th>\n+    </tr>\n+  </thead>\n+  <tbody>\n+    {% for task in tasks %}\n+      <tr class="{% if task.complete %}table-success{% endif %}">\n+        <td>\n+          <form method="post" action="{{ url_for(\'toggle\', task_id=task.id) }}">\n+            <button type="submit" class="btn btn-link p-0">\n+              {% if task.complete %}\u2714{% else %}\u2716{% endif %}\n+            </button>\n+          </form>\n+        </td>\n+        <td>{{ task.title }}</td>\n+        <td>{{ task.due_date or \'-\' }}</td>\n+        <td>{{ task.priority }}</td>\n+        <td>{{ task.created_at }}</td>\n+        <td>\n+          <a href="{{ url_for(\'edit\', task_id=task.id) }}" class="btn btn-sm btn-outline-secondary">Edit</a>\n+          <form method="post" action="{{ url_for(\'delete\', task_id=task.id) }}" style="display:inline-block" onsubmit="return confirm(\'Delete this task?\');">\n+            <button type="submit" class="btn btn-sm btn-outline-danger">Delete</button>\n+          </form>\n+        </td>\n+      </tr>\n+    {% else %}\n+      <tr>\n+        <td colspan="6" class="text-center">No tasks found.</td>\n+      </tr>\n+    {% endfor %}\n+  </tbody>\n+</table>\n+{% endblock %}\n\\ No newline at end of file\n')))}f.isMDXComponent=!0}}]);